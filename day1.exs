defmodule DayOne do
  def elements(string) do
    string
    |> String.codepoints
    |> Enum.map(&String.to_integer/1)
  end
end

defmodule DayOnePartOne do
  def process(string) do
    string
    |> IO.inspect
    |> DayOne.elements
    |> addlast
    |> filter
    |> Enum.sum
    |> IO.inspect
  end

  defp addlast([head | tail]) do
    [head] ++ tail ++ [head]
  end

  defp filter([]) do
    []
  end
  defp filter([_]) do
    []
  end
  defp filter([one, one]) do
    [one]
  end
  defp filter([one, two]) do
    []
  end
  defp filter([one, one | tail]) do
    [one] ++ filter([one] ++ tail)
  end
  defp filter([one, two | tail]) do
    filter([two] ++ tail)
  end
end

defmodule DayOnePartTwo do
  def process(string) do
    string
    |> IO.inspect
    |> DayOne.elements
    |> filter
    |> IO.inspect
    |> Enum.sum
    |> IO.inspect
  end

  defp filter(elms) do
    len = length(elms)
    dist = round(len / 2)
    determine(len, dist, 0, elms)
  end

  defp determine(len, dist, pos, elms) when pos < len and pos + dist < len do
    one = Enum.at(elms, pos)
    two = Enum.at(elms, pos + dist)
    case one do
      two ->
        [one] ++ determine(len, dist, pos + 1, elms)
      _ ->
        determine(len, dist, pos + 1, elms)
    end
  end
  defp determine(len, dist, pos, elms) when pos < len and pos + dist >= len do
    []
  end
  defp determine(len, dist, pos, elms) when pos >= len do
    []
  end
end

#DayOnePartOne.process("1122")
#DayOnePartOne.process("1111")
#DayOnePartOne.process("1234")
#DayOnePartOne.process("91212129")
#DayOnePartOne.process

DayOnePartTwo.process("1212")
DayOnePartTwo.process("1221")
DayOnePartTwo.process("123425")
DayOnePartTwo.process("123123")
DayOnePartTwo.process("12131415")
#DayOnePartTwo.process
